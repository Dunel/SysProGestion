generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  alcaldia
  estudiante
  dependencia
}

model Coderegister {
  id        String   @id @default(cuid())
  code      Int
  mail      String   @unique
  updatedAt DateTime @updatedAt
}

model PreRegister {
  id        Int      @id @default(autoincrement())
  cedula    Int      @unique
  mail      String   @unique
  role      Role     @default(estudiante)
  updatedAt DateTime @updatedAt
}

model User {
  id           Int              @id @default(autoincrement())
  cedula       Int              @unique
  mail         String           @unique
  password     String
  names        String
  lastnames    String
  role         Role             @default(estudiante)
  birthdate    DateTime
  phone        String
  profile      Boolean          @default(false)
  image        String?
  updatedAt    DateTime         @updatedAt
  esInfo       estudentInfo?
  apply        apply[]
  notification notification[]
  depInfo      dependenciaInfo?
}

enum Skills {
  resoluciondeproblemas
  trabajoenequipo
  adaptabilidad
  comunicacionefectiva
  liderazgo
  pensamientocritico
  orientacionaresultados
  creatividad
  gestiondeltiempo
  aprendizajecontinuo
  dondegente
  ensenanza
  sociable
  salud
  deportes
  logistica
  expresionesartisticas
  diseno
  musica
  ingles
  otrosidiomasnaturales
  lenguajesdeprogramacion
}

model estudentInfo {
  id                  Int                   @id @default(autoincrement())
  userCedula          Int                   @unique
  university          String
  career              String?
  quarter             Int
  skills              Skills[]
  interests           String
  description         String
  address             String
  curriculum          String?
  updatedAt           DateTime              @updatedAt
  User                User                  @relation(fields: [userCedula], references: [cedula], onDelete: Cascade)
  applicationApproved applicationApproved[]
}

enum typeApplication {
  pasantia
  servicio
  proyecto
}

model application {
  id                  Int                   @id @default(autoincrement())
  title               String
  idDepend            Int
  description         String?
  imagen              String?
  pay                 Boolean?
  location            String
  type                typeApplication
  skills              Skills[]
  status              status                @default(active)
  date                DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  dependencia         dependenciaInfo       @relation(fields: [idDepend], references: [id], onDelete: Cascade)
  apply               apply[]
  notification        notification[]
  applicationApproved applicationApproved[]
}

enum status {
  active
  inactive
}

model apply {
  id            Int         @id @default(autoincrement())
  userCedula    Int
  applicationId Int
  status        statusApply @default(pendiente)
  updatedAt     DateTime    @updatedAt
  application   application @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  User          User        @relation(fields: [userCedula], references: [cedula], onDelete: Cascade)
  @@unique([userCedula, applicationId])
}

enum statusApply {
  pendiente
  aceptado
  rechazado
  declinado
  aprobado
}

model notification {
  id          Int          @id @default(autoincrement())
  userCedula  Int
  idApplic    Int?
  action      actionNoti
  date        DateTime     @default(now())
  application application? @relation(fields: [idApplic], references: [id], onDelete: Cascade)
  User        User         @relation(fields: [userCedula], references: [cedula], onDelete: Cascade)
}

enum actionNoti {
  apply
  accept
  approve
  delete
  reject
  proposal
}

model dependenciaInfo {
  id          Int           @id @default(autoincrement())
  userCedula  Int           @unique
  name        String
  rif         Int?
  description String?
  address     String?
  email       String?
  social      String?
  phone       String?
  updatedAt   DateTime      @updatedAt
  User        User          @relation(fields: [userCedula], references: [cedula], onDelete: Cascade)
  application application[]
}

model applicationApproved {
  id            Int          @id @default(autoincrement())
  userCedula    Int
  applicationId Int
  status        statusAproved  @default(enproceso)
  date          DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  application   application  @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  esInfo        estudentInfo @relation(fields: [userCedula], references: [userCedula], onDelete: Cascade)
}

enum statusAproved {
  completada
  enproceso
}
